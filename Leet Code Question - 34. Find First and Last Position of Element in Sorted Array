Leet Code Question - 34. Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

Solution :

// class Solution {
// public:
//     vector<int> searchRange(vector<int>& nums, int target) {
//         int first = firstOcc(nums, target);
//         int second = lastOcc(nums, target);
//         return {first, second};
//     }

//     int firstOcc(vector<int>&nums, int key){
//     int s = 0;
//     int e = nums.size()-1;
//     int mid = s + (e-s)/2;
//     int ans = -1;
//     while(s <= e){
//         if(nums[mid] == key){
//             ans = mid;
//             e = mid-1;
//         }
//         else if(nums[mid] < key){
//             s = mid + 1;
//         }
//         else{
//             e = mid - 1;
//         }
//         mid = s + (e-s)/2;
//     }
//     return ans;
// }

// int lastOcc(vector<int>&nums, int key){
//     int s = 0;
//     int e = nums.size()-1;
//     int mid = s + (e-s)/2;
//     int ans = -1;
//     while(s <= e){
//         if(nums[mid] == key){
//             ans = mid;
//             s = mid+1;
//         }
//         else if(nums[mid] < key){
//             s = mid + 1;
//         }
//         else{
//             e = mid - 1;
//         }
//         mid = s + (e-s)/2;
//     }
//     return ans;


// }

// };

class Solution {

private: 
    int firstOcc(vector<int>& nums, int target, int s, int e){
        int mid = s + (e-s)/2;
        int ans = -1;
        if(s > e){
            return -1;
        }
        if(nums[mid] == target){
            int temp = firstOcc(nums, target, s, mid - 1);
            return (temp != -1) ? temp : mid;
        }
        if(nums[mid] < target){
            return firstOcc(nums, target, mid+1, e);
        }
        else{
            return firstOcc(nums, target, s, mid-1);
        }
        return ans;
    }
    

    int lastOcc(vector<int>& nums, int target, int s, int e){
        int mid = s + (e-s)/2;
        int ans = -1;
        if(s > e){
            return -1;
        }
        if(nums[mid] == target){
            int temp = lastOcc(nums, target, mid + 1, e);
            return (temp != -1) ? temp : mid;
        }
        if(nums[mid] < target){
            return lastOcc(nums, target, mid+1, e);
        }
        else{
            return lastOcc(nums, target, s, mid-1);
        }
        return ans;
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int s = 0;
        int e = nums.size()-1;
        int first = firstOcc(nums, target, s, e);
        int second = lastOcc(nums, target, s, e);
        return {first, second};
    }
};
